{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sachin patel\\\\Desktop\\\\e-commerce-assignment\\\\client\\\\src\\\\context\\\\CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/context/CartContext.tsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n// Assuming Product type is defined\n\n// Define the type for a cart item (product + quantity)\n\n// Define the shape of your cart context value\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst CartContext = /*#__PURE__*/createContext(undefined);\n\n// Cart Provider Component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize cart from localStorage or as an empty array\n  const [cartItems, setCartItems] = useState(() => {\n    try {\n      const storedCart = localStorage.getItem('cartItems');\n      return storedCart ? JSON.parse(storedCart) : [];\n    } catch (error) {\n      console.error(\"Failed to parse cart items from localStorage:\", error);\n      return [];\n    }\n  });\n\n  // Persist cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const addToCart = (product, quantity) => {\n    setCartItems(prevItems => {\n      const existItem = prevItems.find(item => item.id === product.id);\n      if (existItem) {\n        // If item exists, update its quantity\n        return prevItems.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + quantity\n        } : item);\n      } else {\n        // If item is new, add it to the cart\n        return [...prevItems, {\n          ...product,\n          quantity\n        }];\n      }\n    });\n  };\n  const removeFromCart = id => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n  const clearCart = () => {\n    setCartItems([]);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the CartContext\n_s(CartProvider, \"p1MqN5XL8L0p5ONfJree/+mIybk=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","undefined","CartProvider","children","_s","cartItems","setCartItems","storedCart","localStorage","getItem","JSON","parse","error","console","setItem","stringify","addToCart","product","quantity","prevItems","existItem","find","item","id","map","removeFromCart","filter","clearCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sachin patel/Desktop/e-commerce-assignment/client/src/context/CartContext.tsx"],"sourcesContent":["// client/src/context/CartContext.tsx\r\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Product } from '../types/Product'; // Assuming Product type is defined\r\n\r\n// Define the type for a cart item (product + quantity)\r\ninterface CartItem extends Product {\r\n  quantity: number;\r\n}\r\n\r\n// Define the shape of your cart context value\r\ninterface CartContextType {\r\n  cartItems: CartItem[];\r\n  addToCart: (product: Product, quantity: number) => void;\r\n  removeFromCart: (id: string) => void;\r\n  clearCart: () => void;\r\n  // You might add updateCartItemQuantity, etc.\r\n}\r\n\r\n// Create the context\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\n// Cart Provider Component\r\nexport const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  // Initialize cart from localStorage or as an empty array\r\n  const [cartItems, setCartItems] = useState<CartItem[]>(() => {\r\n    try {\r\n      const storedCart = localStorage.getItem('cartItems');\r\n      return storedCart ? JSON.parse(storedCart) : [];\r\n    } catch (error) {\r\n      console.error(\"Failed to parse cart items from localStorage:\", error);\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // Persist cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  const addToCart = (product: Product, quantity: number) => {\r\n    setCartItems((prevItems) => {\r\n      const existItem = prevItems.find((item) => item.id === product.id);\r\n\r\n      if (existItem) {\r\n        // If item exists, update its quantity\r\n        return prevItems.map((item) =>\r\n          item.id === product.id ? { ...item, quantity: item.quantity + quantity } : item\r\n        );\r\n      } else {\r\n        // If item is new, add it to the cart\r\n        return [...prevItems, { ...product, quantity }];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (id: string) => {\r\n    setCartItems((prevItems) => prevItems.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, clearCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the CartContext\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAC5C;;AAE5C;;AAKA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;;AAEzE;AACA,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAa,MAAM;IAC3D,IAAI;MACF,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACpD,OAAOF,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,EAAE;IACjD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACrE,OAAO,EAAE;IACX;EACF,CAAC,CAAC;;EAEF;EACAf,SAAS,CAAC,MAAM;IACdW,YAAY,CAACM,OAAO,CAAC,WAAW,EAAEJ,IAAI,CAACK,SAAS,CAACV,SAAS,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMW,SAAS,GAAGA,CAACC,OAAgB,EAAEC,QAAgB,KAAK;IACxDZ,YAAY,CAAEa,SAAS,IAAK;MAC1B,MAAMC,SAAS,GAAGD,SAAS,CAACE,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;MAElE,IAAIH,SAAS,EAAE;QACb;QACA,OAAOD,SAAS,CAACK,GAAG,CAAEF,IAAI,IACxBA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,GAAG;UAAE,GAAGD,IAAI;UAAEJ,QAAQ,EAAEI,IAAI,CAACJ,QAAQ,GAAGA;QAAS,CAAC,GAAGI,IAC7E,CAAC;MACH,CAAC,MAAM;QACL;QACA,OAAO,CAAC,GAAGH,SAAS,EAAE;UAAE,GAAGF,OAAO;UAAEC;QAAS,CAAC,CAAC;MACjD;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMO,cAAc,GAAIF,EAAU,IAAK;IACrCjB,YAAY,CAAEa,SAAS,IAAKA,SAAS,CAACO,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC,CAAC;EACzE,CAAC;EAED,MAAMI,SAAS,GAAGA,CAAA,KAAM;IACtBrB,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAExB,SAAS;MAAEW,SAAS;MAAES,cAAc;MAAEE;IAAU,CAAE;IAAAxB,QAAA,EAC9EA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA7B,EAAA,CAhDaF,YAA+C;AAAAgC,EAAA,GAA/ChC,YAA+C;AAiD5D,OAAO,MAAMiC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG1C,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACqC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}